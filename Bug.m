In Objective-C, a tricky error can arise when dealing with `NSDecimalNumber` and its comparison methods.  Specifically, using `compare:` with `NSDecimalNumber` instances created from different string representations might lead to unexpected results due to the internal representation of decimal numbers. For example, comparing "0.1" and "0.10" using `compare:` might return `NSOrderedSame`, but comparing them after performing arithmetic operations may lead to inconsistencies.